from telebot import TeleBot, types
from dotenv import load_dotenv
import os
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime

load_dotenv()

SERVICE_ACCOUNT_FILE = os.getenv("MY_JSON_KEY")
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –≥—É–≥–ª
credentials = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
gc = gspread.authorize(credentials)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ id
SPREADSHEET_ID = os.getenv("MY_SPREAD_SHEET_ID")
worksheet = gc.open_by_key(SPREADSHEET_ID).sheet1

API_TOKEN = os.getenv("MY_API_KEY")
bot = TeleBot(API_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
user_data = {}


# –¥–æ–ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∏–∂–µ
def ask_contact(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    contact_button = types.KeyboardButton(
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True
    )
    markup.add(contact_button)
    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=markup,
    )


# —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=["start"])
def main(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("ü™™ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Amora Pass"))
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:",
        reply_markup=markup,
    )


@bot.message_handler(func=lambda message: message.text == "ü™™ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Amora Pass")
def ask_consent(message):
    user_data[message.from_user.id] = {"step": "awaiting_consent"}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω"))
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Amora Pass –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=markup,
    )


@bot.message_handler(func=lambda message: message.text == "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω")
def ask_code(message):
    uid = message.from_user.id
    if uid in user_data and user_data[uid].get("step") == "awaiting_consent":
        user_data[uid]["step"] = "awaiting_code"
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥:")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ø—É—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.content_type == "text")
def handle_text(message):
    user_id = message.from_user.id
    text = message.text.strip()

    if user_id not in user_data:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Amora Pass¬ª –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        )
        return

    step = user_data[user_id].get("step")

    if step == "awaiting_code":
        try:
            codes_range = worksheet.range("A2:A20")
            found = None
            for cell in codes_range:
                if cell.value == text:
                    found = cell.row
                    break
            if found:
                activation_value = worksheet.cell(found, 6).value  # –∫–æ–ª–æ–Ω–∫–∞ F
                if activation_value:
                    bot.send_message(message.chat.id, "‚õî –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                    return
                # –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç
                user_data[user_id].update({"row": found, "code": text, "step": "vk_id"})
                bot.send_message(message.chat.id, "–ö–æ–¥ –ø—Ä–∏–Ω—è—Ç. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à VK ID:")
            else:
                bot.send_message(message.chat.id, "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–¥–∞: {str(e)}")

    elif step == "vk_id":
        user_data[user_id]["vk_id"] = text
        user_data[user_id]["step"] = "email"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")

    elif step == "email":
        user_data[user_id]["email"] = text
        full_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
        if full_name:
            user_data[user_id]["name"] = full_name
            user_data[user_id]["step"] = "confirm"
            ask_contact(message)
        else:
            user_data[user_id]["step"] = "name"
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª–Ω–æ—Å—Ç—å—é:")

    elif step == "name":
        user_data[user_id]["name"] = text
        user_data[user_id]["step"] = "confirm"
        ask_contact(message)


@bot.message_handler(content_types=["contact"])
def handle_contact(message):
    user_id = message.from_user.id
    if user_id in user_data and user_data[user_id].get("step") == "confirm":
        try:
            row = user_data[user_id]["row"]
            telegram_id = str(user_id)
            vk_id = user_data[user_id]["vk_id"]
            name = user_data[user_id]["name"]
            email = user_data[user_id]["email"]
            phone = message.contact.phone_number
            activation_date = datetime.now().strftime("%Y-%m-%d %H:%M")

            worksheet.update_acell(f"B{row}", telegram_id)
            worksheet.update_acell(f"C{row}", vk_id)
            worksheet.update_acell(f"D{row}", name)
            worksheet.update_acell(f"E{row}", email)
            worksheet.update_acell(f"F{row}", activation_date)

            bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
            user_data.pop(user_id)

        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {str(e)}")
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ Amora Pass.")


bot.infinity_polling()
