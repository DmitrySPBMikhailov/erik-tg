from telebot import TeleBot, types
from dotenv import load_dotenv
import os
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime

load_dotenv()

SERVICE_ACCOUNT_FILE = os.getenv("MY_JSON_KEY")
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
credentials = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
gc = gspread.authorize(credentials)

SPREADSHEET_ID = os.getenv("MY_SPREAD_SHEET_ID")
worksheet = gc.open_by_key(SPREADSHEET_ID).sheet1

API_TOKEN = os.getenv("MY_API_KEY")
bot = TeleBot(API_TOKEN)

# –•—Ä–∞–Ω–∏–º —à–∞–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
ADMINS = list(map(int, os.getenv("ADMINS", "").split(",")))


# —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "‚ú® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥:")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
@bot.message_handler(
    func=lambda message: message.text and not message.text.startswith("/")
)
def handle_code(message):
    user_id = message.from_user.id
    text = message.text.strip()

    bot.send_message(message.chat.id, "üîé –ü–æ–∏—Å–∫...")  # <-- –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç

    try:
        codes_range = worksheet.range("A2:A501")  # —Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –≤ –∫–æ–ª–æ–Ω–∫–µ A
        found = None
        for cell in codes_range:
            if cell.value == text:
                found = cell.row
                break

        if found:
            tg_id_cell = worksheet.cell(found, 2).value  # –∫–æ–ª–æ–Ω–∫–∞ B
            if tg_id_cell:  # —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω ID
                bot.send_message(message.chat.id, "‚õî –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                return

            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Telegram ID
            worksheet.update_acell(f"B{found}", str(user_id))
            worksheet.update_acell(
                f"C{found}", datetime.now().strftime("%Y-%m-%d %H:%M")
            )  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤—Ä–µ–º—è
            bot.send_message(
                message.chat.id,
                "‚úÖ –í—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å. –° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –º—ã –≤–º–µ—Å—Ç–µ, –∏ Amora Pass –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å "
                "–¥–ª—è —Ç–µ–±—è –≤—Å—ë –±–æ–ª—å—à–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π —Å –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏ Amora.",
            )

        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –î–æ—Ä–æ–≥–æ–µ —Å–µ—Ä–¥—Ü–µ, –ø—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ–¥ –µ—â—ë —Ä–∞–∑. "
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–≥–æ –≤ –º–æ–µ–π –±–∞–∑–µ.",
            )

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–¥–∞: {str(e)}")


# –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@bot.message_handler(commands=["broadcast"])
def start_broadcast(message):
    if message.from_user.id not in ADMINS:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    bot.send_message(message.chat.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
    bot.register_next_step_handler(message, process_broadcast)


def process_broadcast(message):
    if message.from_user.id not in ADMINS:
        return

    text = message.text
    bot.send_message(message.chat.id, f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...\n\n–¢–µ–∫—Å—Ç:\n{text}")

    try:
        tg_ids = worksheet.col_values(2)[1:]  # –∫–æ–ª–æ–Ω–∫–∞ B (Telegram ID), –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        sent, failed = 0, 0
        for tg_id in tg_ids:
            if tg_id.strip():
                try:
                    bot.send_message(int(tg_id), text)
                    sent += 1
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {tg_id}: {e}")
                    failed += 1

        bot.send_message(
            message.chat.id,
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {sent}\n–û—à–∏–±–æ–∫: {failed}",
        )

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")


bot.infinity_polling()
